<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: GddaDev
    Description: none
-->
<module name="Checker">
    <property name="severity" value="warning"/>
    <property name="charset" value="UTF-8"/>
    <property name="fileExtensions" value="java"/>
    <!-- 行长度 -->
    <module name="LineLength">
        <property name="ignorePattern" value="^package.*|^import.*| extends | implements |a href|href|http://|https://|ftp://|@version|@see|@todo|TODO"/>
        <property name="max" value="120"/>
        <property name="tabWidth" value="4"/>
    </module>
    <!-- Tab检查 -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
    <!-- 文件长度，默认2000行 -->
    <module name="FileLength">
        <property name="severity" value="info"/>
    </module>
    <module name="TreeWalker">
        <!-- 每个Tab长度：4个空格 -->
        <property name="tabWidth" value="4"/>
        <!-- 检查类名与文件名是否一致 -->
        <module name="OuterTypeFilename"/>
        <!-- 检查非法的分隔符的下个字符。 -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
        </module>
        <!-- 避免使用Unicode码文字 -->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="severity" value="info"/>
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <!-- import带* -->
        <module name="AvoidStarImport"/>
        <!-- 一个文件只能有一个顶级类 -->
        <module name="OneTopLevelClass"/>
        <module name="NoLineWrap"/>
        <!-- 空代码块 -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <!-- 是否需要大括号 -->
        <module name="NeedBraces"/>
        <!-- 检查’{’和左边的代码块是否在同一行 -->
        <module name="LeftCurly" />
        <!-- 检查’}’ -->
        <module name="RightCurly">
            <property name="tokens" value="LITERAL_TRY,LITERAL_CATCH,LITERAL_FINALLY,LITERAL_IF,LITERAL_ELSE"/>
        </module>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF,METHOD_DEF,CTOR_DEF,LITERAL_FOR,LITERAL_WHILE,STATIC_INIT,INSTANCE_INIT"/>
        </module>
        <!-- 检查令牌后面是否有空白 -->
        <module name="WhitespaceAfter"/>
        <!-- 检查分隔符周围是否有空白 -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
        </module>
        <!-- 一行允许一个表达式 -->
        <module name="OneStatementPerLine"/>
        <!-- 单行定义多个变量声明 -->
        <module name="MultipleVariableDeclarations">
            <property name="severity" value="info"/>
        </module>
        <!-- 数组样式：String[] args -->
        <module name="ArrayTypeStyle"/>
        <!-- switch的default段 -->
        <module name="MissingSwitchDefault"/>
        <!-- 检查switch代码的case中是否缺少break，return，throw和continue。 -->
        <module name="FallThrough"/>
        <!-- long定义时L必须大写 -->
        <module name="UpperEll"/>
        <!-- 检查修饰符的顺序是否遵照java语言规范：
        1.public
        2.protected
        3.private
        4.abstract
        5.static
        6.final
        7.transient
        8.volatile
        9.synchronized
        10.native
        11.strictfp
         -->
        <module name="ModifierOrder"/>
        <!-- 空行规范，以下情况之后必须有空行：文件头、package、所有的import声明、属性、构造函数、方法、内部类、静态代码块、实例代码块 -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <!-- 行分割 -->
        <module name="SeparatorWrap">
            <property name="option" value="nl"/>
            <property name="tokens" value="DOT"/>
        </module>
        <module name="SeparatorWrap">
            <property name="option" value="EOL"/>
            <property name="tokens" value="COMMA"/>
        </module>
        <!-- 包名规范 -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="包名[{0}]必须是全小写"/>
        </module>
        <!-- 类名规范 -->
        <module name="TypeName"/>
        <!-- 属性规范 -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9\$]*$"/>
            <message key="name.invalidPattern"  value="属性名[{0}]必须是小写驼峰格式，如：showName"/>
        </module>
        <!-- 参数规范 -->
        <module name="ParameterName"/>
        <!-- catch参数规范 -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Catch参数名[{0}]必须是小写驼峰格式，如：exception"/>
        </module>
        <!-- 临时变量规范 -->
        <module name="LocalVariableName">
            <property name="allowOneCharVarInForLoop" value="true"/>
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <!-- 类参数规范 -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*$)"/>
            <message key="name.invalidPattern" value="类名[{0}]必须是大写驼峰格式，如：UserDetail"/>
        </module>
        <!-- 方法参数规范 -->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*$)"/>
            <message key="name.invalidPattern" value="方法类型参数名称[{0}]必须是大写驼峰格式，如：public &lt;T&gt; void me()"/>
        </module>
        <!-- 接口参数规范 -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*$)"/>
            <message key="name.invalidPattern" value="接口类型参数名称[{0}]必须是大写驼峰格式，如：public &lt;T&gt; void me()"/>
        </module>
        <!-- 不允许定义finalize()  -->
        <module name="NoFinalizer"/>
        <!-- 多余的空格 -->
        <module name="GenericWhitespace"/>
        <!-- 代码缩进 -->
        <module name="Indentation"/>
        <!-- 重载方法要声明在一起 -->
        <module name="OverloadMethodsDeclarationOrder">
            <property name="severity" value="info"/>
        </module>
        <!-- 变量声明到使用的行数距离 -->
        <module name="VariableDeclarationUsageDistance">
            <property name="severity" value="info"/>
            <property name="allowedDistance" value="5"/>
        </module>
        <!-- 检查方法签名之前的空白 -->
        <module name="MethodParamPad"/>
        <!-- 检查操作符的空白规则 -->
        <module name="OperatorWrap">
            <property name="tokens" value="QUESTION,EQUAL,NOT_EQUAL,DIV,PLUS,MINUS,STAR,MOD,SR,BSR,GE,GT,SL,LE,LT,BXOR,BOR,LOR,BAND,LAND,LITERAL_INSTANCEOF"/>
        </module>
        <!-- 注解位置 -->
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <!-- 注解位置 -->
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <!-- javadoc中@描述不能为空 -->
        <module name="NonEmptyAtclauseDescription">
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <!-- javadoc中缩进 -->
        <module name="JavadocTagContinuationIndentation">
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <!-- javadoc中段落 -->
        <module name="JavadocParagraph">
            <property name="severity" value="ignore"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <!-- javadoc中@的顺序 -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <!-- javadoc中方法和构造函数 -->
        <module name="JavadocMethod">
            <property name="allowedAnnotations" value="Override, Test, ApiOperation"/>
            <!-- <property name="scope" value="public"/> -->
            <property name="accessModifiers" value="public"/>
            <property name="allowMissingParamTags" value="false"/>
            <property name="allowMissingReturnTag" value="false"/>
        </module>
        <module name="MissingJavadocMethod">
            <property name="allowedAnnotations" value="Override, Test, ApiOperation"/>
            <property name="allowMissingPropertyJavadoc" value="true" />
        </module>
        <!-- 方法名 -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9_\$]*$"/>
            <message key="name.invalidPattern"  value="方法名[{0}]必须是小写驼峰格式，如：public void printShowName()"/>
        </module>
        <!-- javadoc单行注释 -->
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <!-- 空的catch段 -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <!-- 注释缩进 -->
        <module name="CommentsIndentation"/>
        <!-- 圆括号规则 -->
        <module name="ParenPad"/>
        <!-- 无效的import -->
        <module name="UnusedImports"/>
        <!-- javadoc中的类和接口 -->
        <module name="JavadocType">
            <property name="allowUnknownTags" value="true"/>
        </module>

        <!-- 常量名 -->
        <module name="ConstantName">
            <property name="applyToPrivate" value="false"/>
        </module>
        <!-- 避免嵌套代码 -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <!-- 空代码块 -->
        <module name="EmptyStatement"/>
        <!-- String的equals表达："something".equals(x) -->
        <module name="StringLiteralEquality"/>
        <!-- javadoc中变量 -->
        <module name="JavadocVariable">
            <property name="scope" value="public"/>
        </module>
        <!-- 无效的导入：主要指sun包之类的非jdk标准包 -->
        <module name="IllegalImport"/>
        <!-- 重复导入 -->
        <module name="RedundantImport"/>
        <!-- 重写equals()必须同时重写hashCode() -->
        <module name="EqualsHashCode"/>
        <!-- 非法实例化，部分方法需要用工厂方法而不是用构造器，例如：Boolean.valueOf() -->
        <module name="IllegalInstantiation"/>
        <!-- 简化Boolean判断的返回 -->
        <module name="SimplifyBooleanReturn"/>
        <!-- 私有构造的类必须final -->
        <module name="FinalClass"/>
        <!-- TODO注释格式 -->
        <module name="TodoComment"/>
        <!-- for循环深度 -->
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>
        <!-- if判断深度 -->
        <module name="NestedIfDepth">
            <property name="severity" value="info"/>
            <property name="max" value="5"/>
        </module>
        <!-- try深度 -->
        <module name="NestedTryDepth">
            <property name="severity" value="info"/>
            <property name="max" value="3"/>
        </module>
    </module>
</module>
